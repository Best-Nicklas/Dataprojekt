matrix(c(1,1,NA,1,NA,1) ncol=2)
matrix(c(1,1,NA,1,NA,1), ncol=2)
matrix(c(1,1,NA,1,NA,1), ncol=3)
matrix(c(1,1,NA,1,NA,1), ncol=3, byrow=TRUE)
unique(matrix(c(1,1,NA,1,NA,1), ncol=3, byrow=TRUE))
library(profvis)
library(bigstatsr)
library(bigsnpr)
library(dplyr)
library(ggplot2)
library(gtools)
# FBM file
CreateFBM <- function(nrow, ncol, path, type = NA_integer_){
return(FBM.code256(nrow = nrow, # number of rows
ncol = ncol, # number of columns
code = c(0L, 1L, 2L, rep(type, 256 - 3)),
backingfile = path))
}
# Sim-code
SimulateMAF <- function(n, low_freq = 0.01, high_freq = 0.49, seed = NULL){
if (!is.null(seed)) {set.seed(seed)}
return(runif(n,low_freq, high_freq))
}
PopulateFBM <- function(MAF, dataframe, seed = NULL) {
if (!is.null(seed)) {set.seed(seed)}
if (dim(dataframe)[2] != length(MAF)) stop("Number of columns in
dataframe does not match
length of MAF vector")
n <- dim(dataframe)[1]
b_size <- n/20
for (i in 0:((n/b_size)-1)) {
b_start <- 1 + i*b_size
b_end <- (1+i)*b_size
dataframe[b_start:b_end,] <- matrix(nrow=b_size,
rbinom(n*b_size,2,MAF),
byrow=TRUE)
}
}
Simulate_Causal_SNPs <- function(n, c, seed = NULL){
if (!is.null(seed)) {set.seed(seed)}
Causal_SNP <- sample(c(1:n),c)
return(Causal_SNP)
}
Simulate_FAM_MAP <- function(dataframe, MAF, causal_SNP , h2, seed = NULL) {
if (!is.null(seed)) {set.seed(seed)}
rows <- dim(dataframe)[1]
cols <- dim(dataframe)[2]
if (cols != length(MAF)) stop("Number of columns in
dataframe does not match
length of MAF vector")
c <- length(causal_SNP)
beta <- numeric(cols)
beta[causal_SNP] <- rnorm(length(causal_SNP), 0, sqrt(h2/c))
mu <- 2*MAF[causal_SNP]
sigma <- sqrt((2*MAF[causal_SNP])*(1-MAF[causal_SNP]))
liab_g <- numeric(rows)
liab_g <- sweep(sweep(dataframe[,causal_SNP], MARGIN = 2, STATS = mu, FUN = "-"), MARGIN = 2, STATS = sigma, FUN = "/") %*%
beta[causal_SNP]
liab_e <- rnorm(dim(dataframe)[1], 0, sqrt(1-h2))
liab_full <- liab_e + liab_g
threshold <- qnorm(0.95, 0, 1)
FAM <- tibble(ID = 1:rows,
Full_Liability = liab_full,
Genetic_Liability = liab_g,
Status = ifelse(liab_full > threshold, 1, 0))
MAP <- tibble(SNP_ID = 1:cols,
Minor_Allele_Frequency = MAF,
BETA = beta,
Causal = ifelse(beta != 0, 1, 0))
MAP_and_FAM <- list(genotypes = dataframe, fam = FAM, map = MAP)
snp_save(MAP_and_FAM)
}
#Open FAM and MAP file
OpenRds <- function(path){
snp_attach(path)
}
runif(100,0.01, 0.49)
tib <- tibble(id = 1:n, gen_liab = rnorm(10, 0, 1),
sib_full_liab = lapply(id, function(id){sample(c(1, 2, 3), replace = TRUE, prob = c(0.5, 0.1, 0.4)), 0, 1}))
tib <- tibble(id = 1:n, gen_liab = rnorm(10, 0, 1),
sib_full_liab = lapply(id, function(id){rnorm(sample(c(1, 2, 3), replace = TRUE, prob = c(0.5, 0.1, 0.4)), 0, 1})))
tib <- tibble(id = 1:n, gen_liab = rnorm(10, 0, 1),
sib_full_liab = lapply(id, function(id){rnorm(sample(c(1, 2, 3), replace = TRUE, prob = c(0.5, 0.1, 0.4)), 0, 1)}))
tib
tib <- tibble(id = 1:n, gen_liab = rnorm(10, 0, 1),
sib_full_liab = lapply(id, function(id){rnorm(sample(c(1, 2, 3), replace = TRUE, prob = c(0.5, 0.1, 0.4)), 0, 1)}))
tib
tib$sib_full_liab
tib <- tibble(id = 1:n, gen_liab = rnorm(10, 0, 1),
sib_full_liab = lapply(id, function(id){rnorm(sample(c(1, 2, 3), prob = c(0.5, 0.1, 0.4)), 0, 1)}))
tib$sib_full_liab
tib
tib <- tibble(id = 1:n, gen_liab = rnorm(10, 0, 1),
sib_full_liab = lapply(id, function(id){rnorm(sample(c(1, 2, 3), size = 10, prob = c(0.5, 0.1, 0.4)), 0, 1)}))
tib <- tibble(id = 1:n, gen_liab = rnorm(10, 0, 1),
sib_full_liab = lapply(id, function(id){rnorm(sample(c(1, 2, 3), size = 10, replace = TRUE, prob = c(0.5, 0.1, 0.4)), 0, 1)}))
tib
tib <- tibble(id = 1:n, gen_liab = rnorm(10, 0, 1),
sib_full_liab = lapply(id, function(id){rnorm(sample(c(1:3), prob = c(0.5, 0.1, 0.4)), 0, 1)}))
tib
sib_full_liab = lapply(id, function(id){rnorm(sample(c(1:3), 0, 1)}))
sib_full_liab = lapply(id, function(id){rnorm(sample(c(1:3), 0, 1)})
tib <- tibble(id = 1:n, gen_liab = rnorm(10, 0, 1),
sib_full_liab = lapply(id, function(id){rnorm(sample(c(1:3), 0, 1))}))
tib
tib <- tibble(id = 1:n, gen_liab = rnorm(10, 0, 1),
sib_full_liab = lapply(id, function(id){rnorm(sample(c(1:3,1), 0, 1))}))
tib
tib <- tibble(id = 1:n, gen_liab = rnorm(10, 0, 1),
sib_full_liab = lapply(id, function(id){rnorm(sample(c(1:3,1), 0, 1))}))
tib
tib <- tibble(id = 1:n, gen_liab = rnorm(10, 0, 1),
sib_full_liab = lapply(id, function(id){rnorm(sample(1:3,1), 0, 1))}))
tib <- tibble(id = 1:n, gen_liab = rnorm(10, 0, 1),
sib_full_liab = lapply(id, function(id){rnorm(sample(1:3,1), 0, 1)}))
tib
n <- 1000
Parent_1_fbm <- CreateFBM(n,n, "Parent_1_test")
Parent_2_fbm <- CreateFBM(n,n, "Parent_2_test")
MAF <- SimulateMAF(n)
PopulateFBM(MAF, Parent_1_fbm)
PopulateFBM(MAF, Parent_2_fbm)
Causal_SNPs <- Simulate_Causal_SNPs(n, n/50)
Simulate_FAM_MAP(Parent_1_fbm, MAF, Causal_SNPs, 0.8)
Simulate_FAM_MAP(Parent_2_fbm, MAF, Causal_SNPs, 0.8)
rds_Parent_1 <- OpenRds("Parent_1_test.rds")
rds_Parent_2 <- OpenRds("Parent_2_test.rds")
child_test <- Simulate_child_sibs(Parent_1_fbm, Parent_2_fbm, "Child_test")
Parent_1_fbm <- CreateFBM(n,n, "Parent1")
# FBM file
CreateFBM <- function(nrow, ncol, path, type = NA_integer_){
return(FBM.code256(nrow = nrow, # number of rows
ncol = ncol, # number of columns
code = c(0L, 1L, 2L, rep(type, 256 - 3)),
backingfile = path))
}
# Sim-code
SimulateMAF <- function(n, low_freq = 0.01, high_freq = 0.49, seed = NULL){
if (!is.null(seed)) {set.seed(seed)}
return(runif(n,low_freq, high_freq))
}
PopulateFBM <- function(MAF, dataframe, seed = NULL) {
if (!is.null(seed)) {set.seed(seed)}
if (dim(dataframe)[2] != length(MAF)) stop("Number of columns in
dataframe does not match
length of MAF vector")
n <- dim(dataframe)[1]
b_size <- n/20
for (i in 0:((n/b_size)-1)) {
b_start <- 1 + i*b_size
b_end <- (1+i)*b_size
dataframe[b_start:b_end,] <- matrix(nrow=b_size,
rbinom(n*b_size,2,MAF),
byrow=TRUE)
}
}
# Simulate causal SNPs
Simulate_Causal_SNPs <- function(n, c, seed = NULL){
if (!is.null(seed)) {set.seed(seed)}
Causal_SNP <- sample(c(1:n),c)
return(Causal_SNP)
}
# Simulate FAM and MAP
Simulate_FAM_MAP <- function(dataframe, MAF, causal_SNP , h2, seed = NULL) {
if (!is.null(seed)) {set.seed(seed)}
rows <- dim(dataframe)[1]
cols <- dim(dataframe)[2]
if (cols != length(MAF)) stop("Number of columns in
dataframe does not match
length of MAF vector")
c <- length(causal_SNP)
beta <- numeric(cols)
beta[causal_SNP] <- rnorm(length(causal_SNP), 0, sqrt(h2/c))
mu <- 2*MAF[causal_SNP]
sigma <- sqrt((2*MAF[causal_SNP])*(1-MAF[causal_SNP]))
liab_g <- numeric(rows)
liab_g <- sweep(sweep(dataframe[,causal_SNP], MARGIN = 2, STATS = mu, FUN = "-"), MARGIN = 2, STATS = sigma, FUN = "/") %*%
beta[causal_SNP]
liab_full <- liab_g + rnorm(dim(dataframe)[1], 0, sqrt(1-h2))
threshold <- qnorm(0.95, 0, 1)
FAM <- tibble(ID = 1:rows,
Full_Liability = liab_full,
Genetic_Liability = liab_g,
Status = ifelse(liab_full > threshold, 1, 0))
MAP <- tibble(SNP_ID = 1:cols,
Minor_Allele_Frequency = MAF,
BETA = beta,
Causal = ifelse(beta != 0, 1, 0))
MAP_and_FAM <- list(genotypes = dataframe, fam = FAM, map = MAP)
snp_save(MAP_and_FAM)
}
#Open FAM and MAP file
OpenRds <- function(path){
snp_attach(path)
}
# Child simulation
Simulate_child <- function(G1, G2, path) {
child <- CreateFBM(dim(G1)[1],dim(G1)[2], path, type = NA_real_)
cols <- dim(G1)[2]
b_size <- cols/40
for (i in 0:((cols/b_size)-1)) {
b_start <- 1 + i*b_size
b_end <- (1+i)*b_size
temp <- sweep((G1[b_start:b_end, ] + G2[b_start:b_end, ]), MARGIN = 2, STATS=2, FUN = "/")
temp[temp == 0.5] <- sample(0:1,length(temp[temp == 0.5]), replace = TRUE)
temp[temp == 1.5] <- sample(0:1,length(temp[temp == 1.5]), replace = TRUE)
child[b_start:b_end, ] <- temp
}
return(child)
}
library(profvis)
library(bigstatsr)
library(bigsnpr)
library(dplyr)
library(ggplot2)
library(gtools)
Parent_1_fbm <- CreateFBM(n,n, "Parent1")
n = 1000
Parent_1_fbm <- CreateFBM(n,n, "Parent1")
MAF <- SimulateMAF(n, seed = 666)
PopulateFBM(MAF, Parent_1_fbm, seed = 777)
Causal_SNPs <- Simulate_Causal_SNPs(n, n/50, seed = 999)
Simulate_FAM_MAP(Parent_1_fbm, MAF, Causal_SNPs, 0.8)
Parent_1_fbm
rds_Parent_1 <- OpenRds("Parent1.rds")
print(rds_Parent_1)
library(profvis)
library(bigstatsr)
library(bigsnpr)
library(dplyr)
library(ggplot2)
library(gtools)
# FBM file
CreateFBM <- function(nrow, ncol, path, type = NA_integer_){
return(FBM.code256(nrow = nrow, # number of rows
ncol = ncol, # number of columns
code = c(0L, 1L, 2L, rep(type, 256 - 3)),
backingfile = path))
}
# Sim-code
SimulateMAF <- function(n, low_freq = 0.01, high_freq = 0.49, seed = NULL){
if (!is.null(seed)) {set.seed(seed)}
return(runif(n,low_freq, high_freq))
}
PopulateFBM <- function(MAF, dataframe, seed = NULL) {
if (!is.null(seed)) {set.seed(seed)}
if (dim(dataframe)[2] != length(MAF)) stop("Number of columns in
dataframe does not match
length of MAF vector")
n <- dim(dataframe)[1]
b_size <- n/20
for (i in 0:((n/b_size)-1)) {
b_start <- 1 + i*b_size
b_end <- (1+i)*b_size
dataframe[b_start:b_end,] <- matrix(nrow=b_size,
rbinom(n*b_size,2,MAF),
byrow=TRUE)
}
}
# Simulate causal SNPs
Simulate_Causal_SNPs <- function(n, c, seed = NULL){
if (!is.null(seed)) {set.seed(seed)}
Causal_SNP <- sample(c(1:n),c)
return(Causal_SNP)
}
# Simulate FAM and MAP
Simulate_FAM_MAP <- function(dataframe, MAF, causal_SNP , h2, seed = NULL) {
if (!is.null(seed)) {set.seed(seed)}
rows <- dim(dataframe)[1]
cols <- dim(dataframe)[2]
if (cols != length(MAF)) stop("Number of columns in
dataframe does not match
length of MAF vector")
c <- length(causal_SNP)
beta <- numeric(cols)
beta[causal_SNP] <- rnorm(length(causal_SNP), 0, sqrt(h2/c))
mu <- 2*MAF[causal_SNP]
sigma <- sqrt((2*MAF[causal_SNP])*(1-MAF[causal_SNP]))
liab_g <- numeric(rows)
liab_g <- sweep(sweep(dataframe[,causal_SNP], MARGIN = 2, STATS = mu, FUN = "-"), MARGIN = 2, STATS = sigma, FUN = "/") %*%
beta[causal_SNP]
liab_full <- liab_g + rnorm(dim(dataframe)[1], 0, sqrt(1-h2))
threshold <- qnorm(0.95, 0, 1)
FAM <- tibble(ID = 1:rows,
Full_Liability = liab_full,
Genetic_Liability = liab_g,
Status = ifelse(liab_full > threshold, 1, 0))
MAP <- tibble(SNP_ID = 1:cols,
Minor_Allele_Frequency = MAF,
BETA = beta,
Causal = ifelse(beta != 0, 1, 0))
MAP_and_FAM <- list(genotypes = dataframe, fam = FAM, map = MAP)
snp_save(MAP_and_FAM)
}
#Open FAM and MAP file
OpenRds <- function(path){
snp_attach(path)
}
# Child simulation
Simulate_child <- function(G1, G2, path) {
child <- CreateFBM(dim(G1)[1],dim(G1)[2], path, type = NA_real_)
cols <- dim(G1)[2]
b_size <- cols/40
for (i in 0:((cols/b_size)-1)) {
b_start <- 1 + i*b_size
b_end <- (1+i)*b_size
temp <- sweep((G1[b_start:b_end, ] + G2[b_start:b_end, ]), MARGIN = 2, STATS=2, FUN = "/")
temp[temp == 0.5] <- sample(0:1,length(temp[temp == 0.5]), replace = TRUE)
temp[temp == 1.5] <- sample(0:1,length(temp[temp == 1.5]), replace = TRUE)
child[b_start:b_end, ] <- temp
}
return(child)
}
n = 1000
Parent_1_fbm <- CreateFBM(n,n, "Parent1")
n = 1000
Parent_1_fbm <- CreateFBM(n,n, "Parent")
rds_Parent_1 <- OpenRds("Parent.rds")
PopulateFBM(MAF, Parent_1_fbm, seed = 777)
Causal_SNPs <- Simulate_Causal_SNPs(n, n/50, seed = 999)
Simulate_FAM_MAP(Parent_1_fbm, MAF, Causal_SNPs, 0.8)
rds_Parent_1 <- OpenRds("Parent.rds")
print(rds_Parent_1)
Parent_1_fbm <- CreateFBM(n,n, "Parent")
n = 1000
Parent_1_fbm <- CreateFBM(n,n, "Parent")
MAF <- SimulateMAF(n, seed = 666)
PopulateFBM(MAF, Parent_1_fbm, seed = 777)
Causal_SNPs <- Simulate_Causal_SNPs(n, n/50, seed = 999)
Simulate_FAM_MAP(Parent_1_fbm, MAF, Causal_SNPs, 0.8)
rds_Parent_1 <- OpenRds("Parent.rds")
print(rds_Parent_1)
rds_Parent_1$map$BETA[1] <- 1
rds_Parent_1
snp_save_dummy <- function(dataframe) {
rows <- dim(dataframe)[1]
cols <- dim(dataframe)[2]
FAM <- tibble(ID = 1:rows,
Full_Liability = numeric(rows),
Genetic_Liability = numeric(rows),
Status = numeric(rows))
MAP <- tibble(SNP_ID = 1:cols,
Minor_Allele_Frequency = numeric(cols),
BETA = numeric(cols),
Causal = numeric(cols))
dummy <- list(genotypes = dataframe, fam = FAM, map = MAP)
snp_save(dummy)
}
n = 1000
Parent_1_fbm <- CreateFBM(n,n, "Parent1")
PopulateFBM(MAF, Parent_1_fbm, seed = 777)
snp_save_dummy(Parent_1_fbm)
rds_Parent_1 <- OpenRds("Parent1.rds")
rnorm_trunc <- function(n, range, mu, sigma) {
lower <- pnorm(min(range), mu, sigma)
upper <- pnorm(max(range), mu, sigma)
u <- runif(n, lower, upper)
return(qnorm(u, mu, sigma))
}
rds_Parent_1
rds_Parent_1$genotypes
